#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import random
import asyncio
import yt_dlp
import speech_recognition as sr  # –í–∞–∂–Ω–æ: –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å –∞–ª–∏–∞—Å–æ–º sr
import aiohttp  # –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
import time
import traceback
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from pydub import AudioSegment

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
STABLEHORDE_API_KEY = os.getenv('STABLEHORDE_API_KEY')
HF_API_KEY = os.getenv('HF_API_KEY')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not all([TELEGRAM_TOKEN, OPENROUTER_API_KEY, STABLEHORDE_API_KEY]):
    raise ValueError("–ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    help_text = """
ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/quote - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
/img - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –í–µ–Ω–µ—Ä—ã
/ask [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /ask –ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–µ–∫—Ç –í–µ–Ω–µ—Ä—ã?)
/donate - –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

üéß *–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/play [–Ω–∞–∑–≤–∞–Ω–∏–µ] - –ù–∞–π—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ (–∏–∑ YouTube)

üí° –°–æ–≤–µ—Ç: –î–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –≤ –∑–∞–ø—Ä–æ—Å–µ:
–ü—Ä–∏–º–µ—Ä: /play Pink Floyd - Time

üìπ *–í–∏–¥–µ–æ –∫–æ–º–∞–Ω–¥—ã:*
/download <url> - –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ —Å YouTube (–¥–æ 50MB)
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube - –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç —Å–∫–∞—á–∞—Ç—å
/twitter <url> - –≤–∏–¥–µ–æ –∏–∑ Twitter/X

üé§ *–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞:
- "–ø–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç [—Ç–µ–∫—Å—Ç]" - –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
- "–Ω–∞—Ä–∏—Å—É–π [–æ–ø–∏—Å–∞–Ω–∏–µ]" - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
- "–æ—Ç–≤–µ—Ç—å –º–Ω–µ [–≤–æ–ø—Ä–æ—Å]" - –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
- "–ù–∞–π–¥–∏ —Ç—Ä–µ–∫ [–Ω–∞–∑–≤–∞–Ω–∏–µ]" - –ø–æ–∏—Å–∫ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –º—É–∑—ã–∫–∏
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

def load_quotes():
    try:
        with open("quotes.txt", "r", encoding="utf-8") as file:
            quotes = [line.strip() for line in file if line.strip()]
            return quotes
    except FileNotFoundError:
        return ["–ë—Ä–æ, —Ñ–∞–π–ª quotes.txt –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π –µ–≥–æ –∏ –¥–æ–±–∞–≤—å —Ü–∏—Ç–∞—Ç—ã."]

async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quotes = load_quotes()
    quote = random.choice(quotes)
    chat_id = update.effective_chat.id
    await context.bot.send_message(chat_id=chat_id, text=quote)

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    if not context.args:
        await context.bot.send_message(chat_id=chat_id, text="–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask.")
        return

    question = ' '.join(context.args)
    system_prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É –ñ–∞–∫–∞ –§—Ä–µ—Å–∫–æ –í–µ–Ω–µ—Ä–∞, –¢—ã —Å–∞–º –ñ–∞–∫ –§—Ä–µ—Å–∫–æ –∏ —Ç—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –µ—Å—Ç–µ—Å—Ç–≤–æ–∑–∑–Ω–∞–Ω–∏—é. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∫–∞–∫ –µ—Å–ª–∏ –±—ã –±—ã–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞, –Ω–æ –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–Ω–æ–≤—Ç–µ–ª—å–Ω—ã–º, –ª–æ–≥–∏—á–Ω—ã–º, —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º"
    reply = await ask_openrouter(question, system_prompt)
    await context.bot.send_message(chat_id=chat_id, text=reply)

async def img(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –í–µ–Ω–µ—Ä—ã (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
    default_prompt = """
    Futuristic city from Jacque Fresco's Venus Project,
    white domed buildings with glass facades,
    solar panels on roofs, magnetic transport systems,
    green parks integrated into architecture,
    clean energy, utopian society,
    bright colors, sunny sky,
    sci-fi aesthetic, highly detailed, 8K,
    style by Syd Mead and Moebius
    """
    
    chat_id = update.effective_chat.id
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–ª –∑–∞–ø—Ä–æ—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    if not context.args:
        prompt = default_prompt
    else:
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        user_text = ' '.join(context.args)
        system_prompt = "–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π. –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥."
        try:
            translated_text = await ask_openrouter(user_text, system_prompt)
            prompt = translated_text if translated_text else default_prompt
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            prompt = default_prompt
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await update.message.reply_text("üîÑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è... –Ø –ø—Ä–∏—à–ª—é –µ–≥–æ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    asyncio.create_task(
        generate_and_notify(prompt, chat_id, context)
    )

async def generate_and_notify(prompt: str, chat_id: int, context: ContextTypes.DEFAULT_TYPE, two=None):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        if two is None:
            image_url = await generate_image(prompt, STABLEHORDE_API_KEY)
        else:
            image_url = await generate_image2(prompt, STABLEHORDE_API_KEY)

        if image_url.startswith("http"):
            await context.bot.send_photo(chat_id=chat_id, photo=image_url)
        else:
            await context.bot.send_message(chat_id=chat_id, text=image_url)
    except Exception as e:
        await context.bot.send_message(chat_id=chat_id, text=f"üö´ –û—à–∏–±–∫–∞: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):

    # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ YouTube —Å—Å—ã–ª–æ–∫
    if "youtube.com" in update.message.text or "youtu.be" in update.message.text:
        context.args = [update.message.text]
        await download_video(update, context)
        return

    is_reply_to_bot = (
        update.message.reply_to_message
        and update.message.reply_to_message.from_user.id == context.bot.id
    )
    is_mention = (
        context.bot.username.lower() in (update.message.text or "").lower()
    )

    if (
        update.message.chat.type == "private"
        or is_reply_to_bot
        or is_mention
    ):
        question = update.message.text
        system_prompt = "–¢—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ–∫—Å–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–Ω–∏–∫, –æ—Ç–ø—É—Å–∫–∞–µ—à—å —Ü–∏–Ω–∏—á–Ω—ã–µ —à—É—Ç–∫–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —Ç—Ä–∞–≤–∏—à—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –æ—Å–∫–æ—Ä–±–ª—è–µ—à—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —Å –ø–µ–Ω–æ–π —É —Ä—Ç–∞ –æ—Ç—Å—Ç–∞–∏–≤–∞–µ—à—å –∏–¥–µ–∏ –ñ–∞–∫–∞ –§—Ä–µ—Å–∫–æ, —Ç—ã –≤—Å–µ—Ö —Å—á–∏—Ç–∞–µ—à—å –∑–∞ –≥–æ–≤–Ω–æ, –æ—Ç–≤–µ—á–∞–µ—à—å –∫—Ä–∞—Ç–∫–æ –∏ –ª–æ–∫–∞–Ω–∏—á–Ω–æ –∫–∞–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤ –æ–±—â–µ–º —á–∞—Ç–µ."
        reply = await ask_openrouter(question, system_prompt)
        await update.message.reply_text(reply)

async def ask_openrouter(question, system_prompt):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {
        "model": "openai/gpt-4.1",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question}
        ]
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as resp:
            if resp.status != 200:
                return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {resp.status}"
            data = await resp.json()
            try:
                return data['choices'][0]['message']['content']
            except (KeyError, IndexError):
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."

async def translate_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter (/translate <—Ç–µ–∫—Å—Ç>)"""
    if not context.args:
        await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: /translate –ü—Ä–∏–≤–µ—Ç!")
        return

    text = ' '.join(context.args)
    system_prompt = "–ü–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π. –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥."
    translated = await ask_openrouter(text, system_prompt)
    await update.message.reply_text(f"üåç –ü–µ—Ä–µ–≤–æ–¥:\n{translated}")

async def voice_to_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    voice_file = await context.bot.get_file(update.message.voice.file_id)
    audio_bytes = await voice_file.download_as_bytearray()

    text = await transcribe_audio(audio_bytes)
    await update.message.reply_text(f"üîä –¢–µ–∫—Å—Ç:\n{text}")

async def transcribe_audio(audio_bytes: bytes) -> str:
    API_URL = "https://api-inference.huggingface.co/models/openai/whisper-tiny"
    headers = {"Authorization": f"Bearer {HF_API_KEY}"} 

    async with aiohttp.ClientSession() as session:
        async with session.post(API_URL, headers=headers, data=audio_bytes) as resp:
            if resp.status == 200:
                result = await resp.json()
                return result.get("text", "")
    return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å."

async def generate_image(prompt: str, api_key: str) -> str:
    url = "https://stablehorde.net/api/v2/generate/async"
    headers = {
        "Content-Type": "application/json",
        "apikey": api_key,  # –í–∞—à –∫–ª—é—á!
        "Client-Agent": "my-telegram-bot/1.0"  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫–ª–∏–µ–Ω—Ç
    }

    payload = {
        "prompt": prompt,  # –ü–µ—Ä–µ–¥–∞—ë–º –û–î–ò–ù —á—ë—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç
        "params": {
            "width": 512,
            "height": 512,
            "steps": 40,  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            "n": 1,
            "cfg_scale": 10,  # –°–∏–ª—å–Ω–µ–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—É (7-12)
        },
        "models": ["CyberRealistic", "NeverEnding Dream"]
    }

    async with aiohttp.ClientSession() as session:
        # (1) –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        async with session.post(url, json=payload, headers=headers) as resp:
            if resp.status != 202:
                error = await resp.text()
                return f"üö´ –û—à–∏–±–∫–∞ API: {resp.status} | {error}"
            
            data = await resp.json()
            task_id = data["id"]

        # (2) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        check_url = f"https://stablehorde.net/api/v2/generate/check/{task_id}"
        for _ in range(30):  # 30 –ø–æ–ø—ã—Ç–æ–∫ (~2.5 –º–∏–Ω—É—Ç—ã)
            await asyncio.sleep(5)
            async with session.get(check_url, headers=headers) as check_resp:
                if check_resp.status != 200:
                    return f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {check_resp.status}"
                
                status = await check_resp.json()
                if status["done"]:
                    break

        # (3) –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_url = f"https://stablehorde.net/api/v2/generate/status/{task_id}"
        async with session.get(result_url, headers=headers) as result_resp:
            if result_resp.status != 200:
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
            
            result = await result_resp.json()
            if not result.get("generations"):
                return "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ."
            
            return result["generations"][0]["img"]

async def generate_image2(prompt: str, api_key: str) -> str:
    url = "https://stablehorde.net/api/v2/generate/async"
    headers = {
        "Content-Type": "application/json",
        "apikey": api_key,  # –í–∞—à –∫–ª—é—á!
        "Client-Agent": "my-telegram-bot/1.0"  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫–ª–∏–µ–Ω—Ç
    }

    payload = {
        "prompt": prompt,  # –ü–µ—Ä–µ–¥–∞—ë–º –û–î–ò–ù —á—ë—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç
        "params": {
            "width": 640,
            "height": 320,
            "steps": 40,  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            "n": 1,
            "cfg_scale": 10,  # –°–∏–ª—å–Ω–µ–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—É (7-12)
        },
        "models": ["CyberRealistic", "NeverEnding Dream"]
    }

    async with aiohttp.ClientSession() as session:
        # (1) –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        async with session.post(url, json=payload, headers=headers) as resp:
            if resp.status != 202:
                error = await resp.text()
                return f"üö´ –û—à–∏–±–∫–∞ API: {resp.status} | {error}"

            data = await resp.json()
            task_id = data["id"]

        # (2) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        check_url = f"https://stablehorde.net/api/v2/generate/check/{task_id}"
        for _ in range(30):  # 30 –ø–æ–ø—ã—Ç–æ–∫ (~2.5 –º–∏–Ω—É—Ç—ã)
            await asyncio.sleep(5)
            async with session.get(check_url, headers=headers) as check_resp:
                if check_resp.status != 200:
                    return f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {check_resp.status}"

                status = await check_resp.json()
                if status["done"]:
                    break

        # (3) –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_url = f"https://stablehorde.net/api/v2/generate/status/{task_id}"
        async with session.get(result_url, headers=headers) as result_resp:
            if result_resp.status != 200:
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."

            result = await result_resp.json()
            if not result.get("generations"):
                return "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ."

            return result["generations"][0]["img"]


async def voice_to_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    if not update.message.voice:
        await update.message.reply_text("‚ùå –≠—Ç–æ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        voice_file = await context.bot.get_file(update.message.voice.file_id)
        await voice_file.download_to_drive("voice_message.ogg")

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç
        recognized_text = await convert_voice_to_text("voice_message.ogg")

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞
        if recognized_text.lower().startswith('–ø–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç'):
            text_to_translate = recognized_text[14:].strip()
            if text_to_translate:
                translated = await ask_openrouter(text_to_translate, "–ü–µ—Ä–µ–≤–µ–¥–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –±–µ–∑ –ø–æ—è—Å–Ω–µ–Ω–∏–π. –¢–æ–ª—å–∫–æ –ø–µ—Ä–µ–≤–æ–¥.")
                await update.message.reply_text(f"üåç –ü–µ—Ä–µ–≤–æ–¥:\n{translated}")
            else:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ—Å–ª–µ '–ø–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç'")

        elif recognized_text.lower().startswith('–Ω–∞—Ä–∏—Å—É–π'):
            prompt = recognized_text[7:].strip()
            if not prompt:
                prompt = "–§—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –í–µ–Ω–µ—Ä–∞"

            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é img —Å –ø—Ä–æ–º–ø—Ç–æ–º
            context.args = prompt.split()  # –≠–º—É–ª–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
            await img(update, context)

        elif recognized_text.lower().startswith('–Ω–∞–π–¥–∏ —Ç—Ä–µ–∫'):
            query = recognized_text[10:].strip()  # –£–±–∏—Ä–∞–µ–º "–Ω–∞–π–¥–∏ —Ç—Ä–µ–∫"
            if query:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é play_music
                context.args = query.split()  # –ò–º–∏—Ç–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
                await play_music(update, context)
            else:
                await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –ø–æ—Å–ª–µ '–Ω–∞–π–¥–∏ —Ç—Ä–µ–∫'")

        elif recognized_text.lower().startswith('–æ—Ç–≤–µ—Ç—å –º–Ω–µ'):
            question = recognized_text[9:].strip()
            if question:
                context.args = [question]  # –≠–º—É–ª–∏—Ä—É–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
                await ask(update, context)
            else:
                await update.message.reply_text("‚ùå –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ '–æ—Ç–≤–µ—Ç—å –º–Ω–µ'")

        else:
            await update.message.reply_text(f"üé§ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n{recognized_text}\n\n‚ÑπÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å –∫–æ–º–∞–Ω–¥:\n- '–ø–µ—Ä–µ–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç...'\n- '–Ω–∞—Ä–∏—Å—É–π...'\n- '–æ—Ç–≤–µ—Ç—å –º–Ω–µ...''\n- '–Ω–∞–π–¥–∏ —Ç—Ä–µ–∫...'")

    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")
    finally:
        if os.path.exists("voice_message.ogg"):
            os.remove("voice_message.ogg")

async def convert_voice_to_text(voice_path: str) -> str:
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç"""
    recognizer = sr.Recognizer()

    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º .ogg –≤ .wav
        audio = AudioSegment.from_ogg(voice_path)
        audio.export("temp.wav", format="wav")

        # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —Ç–µ–∫—Å—Ç
        with sr.AudioFile("temp.wav") as source:
            audio_data = recognizer.record(source)
            text = recognizer.recognize_google(audio_data, language="ru-RU")
            return text
    except sr.UnknownValueError:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å üò¢"
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}"
async def donate(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤"""
    donate_text = """
üíé *–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞*

–ï—Å–ª–∏ –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è –±–æ—Ç –∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏–µ, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–Ω–∞—Ç –≤ USDT (TRC20):

üîπ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ [—á–∞—Ç—É —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤](https://t.me/+Et1vrcDMRmkxNzcy)

üîπ *–ö–æ—à–µ–ª–µ–∫ USDT (TRC20):* 

```TREqCkanrRjkRQ3PUHsowCtHAqFJ9kaaL1```

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –ø–æ–¥–¥–µ—Ä–∂–∫—É! üôè

–°–≤—è–∑–∞—Ç—å—Å—è —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –º–æ–∂–Ω–æ —Ç—É—Ç: https://t.me/+Et1vrcDMRmkxNzcy
"""
    await update.message.reply_text(donate_text, parse_mode='Markdown')


async def play_music(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞: /play <–Ω–∞–∑–≤–∞–Ω–∏–µ>")
        return

    query = ' '.join(context.args)
    await update.message.reply_text(f"üîç –ò—â—É —Ç—Ä–µ–∫: {query}...")

    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É downloads –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
        os.makedirs('downloads', exist_ok=True)

        ydl_opts = {
            'format': 'bestaudio/best',
            'default_search': 'ytsearch',
            'noplaylist': True,
            'quiet': True,
            'outtmpl': 'downloads/%(title)s.%(ext)s',
            'postprocessors': [{
                'key': 'FFmpegExtractAudio',
                'preferredcodec': 'mp3',
            }],
            'retries': 3,
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(f"ytsearch:{query}", download=True)

            if not info or not info.get('entries'):
                await update.message.reply_text("–¢—Ä–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            original_filename = ydl.prepare_filename(info['entries'][0])
            audio_file = os.path.splitext(original_filename)[0] + '.mp3'

            # –ñ–¥–µ–º –ø–æ–∫–∞ —Ñ–∞–π–ª –ø–æ—è–≤–∏—Ç—Å—è (–º–∞–∫—Å 10 —Å–µ–∫)
            for _ in range(10):
                if os.path.exists(audio_file):
                    break
                await asyncio.sleep(1)
            else:
                raise Exception("–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if not os.path.exists(audio_file) or os.path.getsize(audio_file) < 1024:
                raise Exception("–ù–µ–≤–µ—Ä–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
            with open(audio_file, 'rb') as audio:
                await update.message.reply_audio(
                    audio=audio,
                    title=info['entries'][0].get('title', query),
                    performer=info['entries'][0].get('uploader', 'Unknown Artist')
                )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        print(f"Error: {traceback.format_exc()}")

    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if 'original_filename' in locals() and os.path.exists(original_filename):
            os.remove(original_filename)
        if 'audio_file' in locals() and os.path.exists(audio_file):
            os.remove(audio_file)

async def download_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ URL YouTube –≤–∏–¥–µ–æ: /download <url>")
        return

    url = context.args[0]
    if "youtube.com" not in url and "youtu.be" not in url:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ YouTube")
        return

    progress_message = None

    try:
        progress_message = await update.message.reply_text("‚è≥ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ...")

        ydl_opts = {
            'format': 'bestvideo[height<=480]+bestaudio/best[height<=480]',
            'outtmpl': 'downloads/%(title)s.%(ext)s',
            'merge_output_format': 'mp4',
            'quiet': True,
            'socket_timeout': 30,
            'retries': 3,
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            video_path = ydl.prepare_filename(info)

            file_size = os.path.getsize(video_path)
            if file_size > 50 * 1024 * 1024:
                raise Exception(f"–í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({file_size // (1024 * 1024)}MB). –ú–∞–∫—Å. 50MB.")

            await progress_message.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ timeout
            await update.message.reply_video(
                video=open(video_path, 'rb'),
                caption=f"üé¨ {info.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}",
                duration=info.get('duration'),
                supports_streaming=True
            )

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        if progress_message:
            await progress_message.edit_text(error_msg)
        else:
            await update.message.reply_text(error_msg)
        print(f"Video download error: {traceback.format_exc()}")

    finally:
        if 'video_path' in locals() and os.path.exists(video_path):
            os.remove(video_path)
        if progress_message:
            try:
                await progress_message.delete()
            except:
                pass

async def download_twitter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ URL —Ç–≤–∏—Ç–∞ —Å –≤–∏–¥–µ–æ: /download_twitter <url>")
        return

    url = context.args[0]
    if "twitter.com" not in url and "x.com" not in url:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Twitter/X")
        return

    try:
        msg = await update.message.reply_text("‚è≥ –°–∫–∞—á–∏–≤–∞—é –≤–∏–¥–µ–æ –∏–∑ Twitter...")

        ydl_opts = {
            'format': 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]',
            'outtmpl': 'downloads/%(title)s.%(ext)s',
            'quiet': True,
            'merge_output_format': 'mp4',
            'cookiefile': 'cookies.txt',  # –î–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=True)
            video_path = ydl.prepare_filename(info)

            await msg.edit_text("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ...")
            await update.message.reply_video(
                video=open(video_path, 'rb'),
                caption=f"üé¨ –í–∏–¥–µ–æ –∏–∑ Twitter\n@{info.get('uploader', 'unknown')}"
            )

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        print(f"Twitter download error: {traceback.format_exc()}")

    finally:
        if 'video_path' in locals() and os.path.exists(video_path):
            os.remove(video_path)
        if 'msg' in locals():
            try:
                await msg.delete()
            except:
                pass


async def vk_playlist(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ URL –ø–ª–µ–π–ª–∏—Å—Ç–∞ VK: /vk_playlist <url>")
        return

    url = context.args[0]
    if "vk.com" not in url or "audio_playlist" not in url:
        await update.message.reply_text(
            "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–ª–µ–π–ª–∏—Å—Ç VK (–ø—Ä–∏–º–µ—Ä: https://vk.com/audio?section=playlists&z=audio_playlist_12345_56789)")
        return

    try:
        msg = await update.message.reply_text("üîç –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–µ–π–ª–∏—Å—Ç–µ...")

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è VK
        ydl_opts = {
            'extract_flat': True,
            'dump_single_json': True,
            'quiet': True,
            'force_generic_extractor': True,
        }

        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(url, download=False)

            if not info or not info.get('entries'):
                await msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç")
                return

            # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞:
            await msg.edit_text(f"üéµ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: {len(info['entries'])}\n–ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É...")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫
            for idx, entry in enumerate(info['entries'][:10]):  # –û–≥—Ä–∞–Ω–∏—á–∏–º 10 —Ç—Ä–µ–∫–∞–º–∏
                try:
                    track_info = f"{entry.get('artist', '?')} - {entry.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}"
                    await msg.edit_text(f"‚è¨ [{idx + 1}/{len(info['entries'])}] {track_info}")

                    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∞—É–¥–∏–æ
                    audio_opts = {
                        'format': 'bestaudio/best',
                        'outtmpl': f"downloads/{entry['id']}.%(ext)s",
                        'postprocessors': [{
                            'key': 'FFmpegExtractAudio',
                            'preferredcodec': 'mp3',
                        }],
                    }

                    with yt_dlp.YoutubeDL(audio_opts) as audio_ydl:
                        audio_info = audio_ydl.extract_info(entry['url'], download=True)
                        audio_file = audio_ydl.prepare_filename(audio_info).replace('.webm', '.mp3')

                        await update.message.reply_audio(
                            audio=open(audio_file, 'rb'),
                            title=entry.get('title'),
                            performer=entry.get('artist'),
                        )
                        os.remove(audio_file)

                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞: {e}")
                    continue

        await msg.edit_text("‚úÖ –ü–ª–µ–π–ª–∏—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!")

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    finally:
        if 'msg' in locals():
            try:
                await msg.delete()
            except:
                pass

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    commands = [
        ("help", help_command), ("h", help_command),
        ("quote", quote), ("q", quote),
        ("ask", ask), ("a", ask),
        ("img", img), ("i", img),
        ("translate", translate_text), ("t", translate_text),
        ("donate", donate), ("d", donate),
        ("play", play_music), ("p", play_music),
        ("download", download_video),
        ("twitter", download_twitter),
        ("vk_playlist", vk_playlist)
    ]
    for cmd, handler in commands:
        application.add_handler(CommandHandler(cmd, handler))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(MessageHandler(filters.VOICE, voice_to_text_handler))

    application.run_polling()

if __name__ == "__main__":
    main()
