#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import random
import asyncio
import aiohttp  # –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY')
STABLEHORDE_API_KEY = os.getenv('STABLEHORDE_API_KEY')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
if not all([TELEGRAM_TOKEN, OPENROUTER_API_KEY, STABLEHORDE_API_KEY]):
    raise ValueError("–ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–ø–∏—Å–∞–Ω–∏–µ–º"""
    help_text = """
ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/quote - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
/img - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –í–µ–Ω–µ—Ä—ã
/ask [–≤–æ–ø—Ä–æ—Å] - –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –±–æ—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: /ask –ß—Ç–æ —Ç–∞–∫–æ–µ –ø—Ä–æ–µ–∫—Ç –í–µ–Ω–µ—Ä—ã?)
"""
    await update.message.reply_text(help_text, parse_mode='Markdown')

def load_quotes():
    try:
        with open("quotes.txt", "r", encoding="utf-8") as file:
            quotes = [line.strip() for line in file if line.strip()]
            return quotes
    except FileNotFoundError:
        return ["–ë—Ä–æ, —Ñ–∞–π–ª quotes.txt –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π –µ–≥–æ –∏ –¥–æ–±–∞–≤—å —Ü–∏—Ç–∞—Ç—ã."]

async def send_quote(context: ContextTypes.DEFAULT_TYPE):
    quotes = load_quotes()
    quote = random.choice(quotes)
    caht_id = update.effective_chat.id
    await context.bot.send_message(chat_id=CHAT_ID, text=quote)

async def quote(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quotes = load_quotes()
    quote = random.choice(quotes)
    await context.bot.send_message(chat_id=CHAT_ID, text=quote)

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    if not context.args:
        await context.bot.send_message(chat_id=chat_id, text="–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /ask.")
        return

    question = ' '.join(context.args)
    system_prompt = "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–µ–∫—Ç—É –ñ–∞–∫–∞ –§—Ä–µ—Å–∫–æ –í–µ–Ω–µ—Ä–∞, –¢—ã —Å–∞–º –ñ–∞–∫ –§—Ä–µ—Å–∫–æ –∏ —Ç—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –µ—Å—Ç–µ—Å—Ç–≤–æ–∑–∑–Ω–∞–Ω–∏—é. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∫–∞–∫ –µ—Å–ª–∏ –±—ã –±—ã–ª —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞, –Ω–æ –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Å–Ω–æ–≤—Ç–µ–ª—å–Ω—ã–º, –ª–æ–≥–∏—á–Ω—ã–º, —É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–º"
    reply = await ask_openrouter(question, system_prompt)
    await context.bot.send_message(chat_id=chat_id, text=reply)

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
async def img(update: Update, context: ContextTypes.DEFAULT_TYPE):
    #if not context.args:
    #    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: /img")
    #    return

    #prompt = " ".join(context.args)
    prompt = "–§—É—Ç—É—Ä–µ—Å—Ç–∏—á–Ω—ã–π —É—Ç–æ–ø–∏—á–Ω—ã–π –º–∏—Ä –±—É–¥—É—â–µ–≥–æ"
    chat_id = update.effective_chat.id

    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await update.message.reply_text("üîÑ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è... –Ø –ø—Ä–∏—à–ª—é –µ–≥–æ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ!")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É—è –±–æ—Ç–∞)
    asyncio.create_task(
        generate_and_notify(prompt, chat_id, context)
    )

async def generate_and_notify(prompt: str, chat_id: int, context: ContextTypes.DEFAULT_TYPE):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    try:
        image_url = await generate_image(prompt, STABLEHORDE_API_KEY)

        if image_url.startswith("http"):
            await context.bot.send_photo(chat_id=chat_id, photo=image_url)
        else:
            await context.bot.send_message(chat_id=chat_id, text=image_url)
    except Exception as e:
        await context.bot.send_message(chat_id=chat_id, text=f"üö´ –û—à–∏–±–∫–∞: {e}")

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    is_reply_to_bot = (
        update.message.reply_to_message
        and update.message.reply_to_message.from_user.id == context.bot.id
    )
    is_mention = (
        context.bot.username.lower() in (update.message.text or "").lower()
    )

    if (
        update.message.chat.type == "private"
        or is_reply_to_bot
        or is_mention
    ):
        question = update.message.text
        system_prompt = [
            "–¢—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ–∫—Å–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–Ω–∏–∫, –æ—Ç–ø—É—Å–∫–∞–µ—à—å —Ü–∏–Ω–∏—á–Ω—ã–µ —à—É—Ç–∫–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—É —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —Ç—Ä–∞–≤–∏—à—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –æ—Å–∫–æ—Ä–±–ª—è–µ—à—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, —Å –ø–µ–Ω–æ–π —É —Ä—Ç–∞ –æ—Ç—Å—Ç–∞–∏–≤–∞–µ—à—å –∏–¥–µ–∏ –ñ–∞–∫–∞ –§—Ä–µ—Å–∫–æ, —Ç—ã –≤—Å–µ—Ö —Å—á–∏—Ç–∞–µ—à—å –∑–∞ –≥–æ–≤–Ω–æ, –æ—Ç–≤–µ—á–∞–µ—à—å –∫—Ä–∞—Ç–∫–æ –∏ –ª–æ–∫–∞–Ω–∏—á–Ω–æ –∫–∞–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤ –æ–±—â–µ–º —á–∞—Ç–µ.",
            #"–¢—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —É—á—Ç–∏–≤—ã–π —Å–æ–±–µ—Å–µ–Ω–∏–∫, –¥–µ–ª–∞–µ—à—å –∫–æ–º–ª–µ–º–µ–Ω—Ç—ã, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –≤–µ–∂–ª–µ–≤–æ –æ–±—Ä–∞—â–∞–µ—à—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É, –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –æ–±—ä—è—Å–Ω—è–µ—à—å –∏–¥–µ–∏ –ñ–∞–∫–∞ –§—Ä–µ—Å–∫–æ, —Ç—ã –≤—Å–µ—Ö —Å—á–∏—Ç–∞–µ—à—å —É–≤–∞–∂–∞–µ—à—å, –æ—Ç–≤–µ—á–∞–µ—à—å –∫—Ä–∞—Ç–∫–æ –∏ –ª–æ–∫–∞–Ω–∏—á–Ω–æ –∫–∞–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤ –æ–±—â–µ–º —á–∞—Ç–µ.",
            #"–¢—ã —Å–ª–µ–≥–∫–∞ –∏—Ä–æ–Ω–∏—á–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫, –ø–æ–¥—à—É—á–∏–≤–∞–µ—à—å –Ω–∞–¥ –∞–±—Å—É—Ä–¥–Ω—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, –Ω–æ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—à—å –Ω–∞ –ª–∏—á–Ω–æ—Å—Ç–∏. –û—Ç–≤–µ—á–∞–µ—à—å –∫—Ä–∞—Ç–∫–æ –∫–∞–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –≤ –æ–±—â–µ–º —á–∞—Ç–µ."
        ]
        random_prompt = random.choice(system_prompt)
        reply = await ask_openrouter(question, random_prompt)
        await update.message.reply_text(reply)

async def ask_openrouter(question, system_prompt):
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }
    payload = {
        "model": "openai/gpt-4.1",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": question}
        ]
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as resp:
            if resp.status != 200:
                return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {resp.status}"
            data = await resp.json()
            try:
                return data['choices'][0]['message']['content']
            except (KeyError, IndexError):
                return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏."

async def generate_image(prompt: str, api_key: str) -> str:
    url = "https://stablehorde.net/api/v2/generate/async"
    headers = {
        "Content-Type": "application/json",
        "apikey": api_key,  # –í–∞—à –∫–ª—é—á!
        "Client-Agent": "my-telegram-bot/1.0"  # –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –∫–ª–∏–µ–Ω—Ç
    }

    # –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ –í–µ–Ω–µ—Ä—ã
    full_prompt = """
    Futuristic city from Jacque Fresco's Venus Project,
    white domed buildings with glass facades,
    solar panels on roofs, magnetic transport systems,
    green parks integrated into architecture,
    clean energy, utopian society,
    bright colors, sunny sky,
    sci-fi aesthetic, highly detailed, 8K,
    style by Syd Mead and Moebius
"""
    
    payload = {
        "prompt": full_prompt,  # –ü–µ—Ä–µ–¥–∞—ë–º –û–î–ò–ù —á—ë—Ç–∫–∏–π –ø—Ä–æ–º–ø—Ç
        "params": {
            "width": 512,
            "height": 512,
            "steps": 40,  # –£–≤–µ–ª–∏—á–∏–ª–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–∏
            "n": 1,
            "cfg_scale": 10,  # –°–∏–ª—å–Ω–µ–µ —Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—É (7-12)
        },
        "models": ["CyberRealistic", "NeverEnding Dream"]
    }

    async with aiohttp.ClientSession() as session:
        # (1) –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        async with session.post(url, json=payload, headers=headers) as resp:
            if resp.status != 202:
                error = await resp.text()
                return f"üö´ –û—à–∏–±–∫–∞ API: {resp.status} | {error}"
            
            data = await resp.json()
            task_id = data["id"]

        # (2) –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        check_url = f"https://stablehorde.net/api/v2/generate/check/{task_id}"
        for _ in range(30):  # 30 –ø–æ–ø—ã—Ç–æ–∫ (~2.5 –º–∏–Ω—É—Ç—ã)
            await asyncio.sleep(5)
            async with session.get(check_url, headers=headers) as check_resp:
                if check_resp.status != 200:
                    return f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {check_resp.status}"
                
                status = await check_resp.json()
                if status["done"]:
                    break

        # (3) –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result_url = f"https://stablehorde.net/api/v2/generate/status/{task_id}"
        async with session.get(result_url, headers=headers) as result_resp:
            if result_resp.status != 200:
                return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è."
            
            result = await result_resp.json()
            if not result.get("generations"):
                return "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ."
            
            return result["generations"][0]["img"]

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("quote", quote))
    application.add_handler(CommandHandler("ask", ask))
    application.add_handler(CommandHandler("img", img))
    application.add_handler(CommandHandler("help", help_command))

    application.add_handler(
        MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    )

    application.run_polling()

if __name__ == "__main__":
    main()
